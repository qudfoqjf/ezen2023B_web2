  JPA 설치
        -implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  jdbc(mysql) 설치
        -runtimeOnly 'com.mysql:mysql-connector-j'

  필수 연동 설정
    application.properties 파일에서 연동 코드를 읽어서 자동으로 연동
    # JDBC 연동
    #1. 해당 JDBC 클래스를 호출한다.
    spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
    #2. 해당 JDBC 클래스를 이용한 접속할 DB서버 경로 설정
    spring.datasource.url=jdbc:mysql://localhost:3306/springweb2
    #3. DB 서버의 아이디와 비밀번호
    spring.datasource.username=root
    spring.datasource.password=1234
    #4. JPA DDL(create,drop,alter 등등)에 대한 옵션
    #   1. 서버 켜질 때 DDL 생성여부
    spring.jpa.hibernate.ddl-auto = create
        -(테이블이 존재하면)테이블을 지우고 새로운 테이블 생성
    #spring.jpa.hibernate.ddl-auto = update
        -기존 데이터를 유지하고 변화가 있는 필드에 대해서 업데이트
    # create database springweb2;


    *연동실패 오류 메시지 : Failed to configure a DataSource:'url' attribute is not specified and no embedded


  -JPA: java persistence Api
    - persistence(영속성: 프로그램이 종료되어도 사라지지 않는 데이터의 특성)
    - 역할
        - Dao란?? DB연동/ 조작/ 결과를 다루는 자바 객체
            클라이언트 ---------> 서버(자바) : 8080: ----JDBC(DAO) --------> DB(MYSQL) : 3306
        - JPA
            클라이언트 ---------> 서버(자바) : 8080: ----JPA --------> DB(MYSQL) : 3306

        - 핵심도구
            1. 엔티티      : 자바 객체를 DB가 이해 할 수 있게 만든 것으로 이를 기반으로 테이블이 만들어진다.
                엔티티(개체) <-----> 하나의 생물체(테이블)
                엔티티 클래스 <----> DB 테이블
                엔티티 하나의 객체 <----> 테이블의 하나의 레코드

            2. 리파지터리  : 엔티티가 DB 속 테이블에 저장 및 관리(조작) 할 수 있도록 하는 인터페이스 입니다. 예시) ps
                (인터페이스: 서로 다른 객체들 간의 동일한 기능을 수행하게끔 조작하는 하나의 기능들의 묶음)

- 엔티티 만드는 방법 (테이블 생성)
    1. 클래스 파일을 생성한다.
    2. 클래스에 어노테이션 @Entity 를 선언한다.
    3. PK 필드를 반드시 1개이상 선정한다 (EX: @Id)
        -엔티티 클래스에 pk가 없으면 오류발생 : has no identifier
-리파지터리 만드는 방법
    1. 일반 인터페이스처럼 인터페이스 파일을 생성한다.
    2. extends JpaRepository 상속받기
        extends JpaRepository <조작할엔티티클래스명,pk 필드의 자료형>

-리파지터리 객체 이용한 엔티티 조작
    1. [C] .save(저장할 엔티티)
    2. [R] .findAll()
    2. [R] .findById(호출할 ID(PK값))
    3. [U] X
    4. [D] .delete(삭제할엔티티) 또는 .deleteById(삭제할 PK 번호)

=================================================================================
ORM(Object Relational Mapping) : 객체로 연결해준다.
    - 개발언어와 데이터베이스 연결시 SQL 언어가 아닌 개발언어로 접근할 수 있도록 해주는 툴
=================================================================================
JPA 관련 어노테이션
    1. @Entity : 해당 클래스를 엔티티로 사용 명시
        - ORM : 객체와 데이터베이스 개체와 연동/매핑/연결 해주는 기법
        - 자바 클래스와 데이터베이스의 테이블과 연동
    2. @Id     : primary key 명시
        -JPA 사용시 1개 이상 무조건 필수(리포지토리 사용시 PK가 반드시 필요하기 때문)

    3. @Table(name="테이블명") : 해당 엔티티 테이블의 이름 정의
        -생략시 해당 클래스명으로 테이블명이 생성

    4. @GeneratedValue(strategy = GenerationType.IDENTITY)  :  auto_increment(DB에 따라서 사용가능여부가 다름)

    5. @Column : 필드
            @Column(columnDefinition = "DB type")
            @Column(name="필드명"):
                -생략시 자바 필드명 생성
            @Column(length=허용범위자료형크기):  길이(varchar)
                -생략시 최대 허용범위
            @Column(nullable =true) : null 여부
                -생략시 true
                false: not null
            @Column(unique=false)   : 중복여부
                -생략시 false
                true:unique
    6. 자료형
            자바                      mysql (db)
            int                       int
            boolean                   bit(0,1)
            byte                      tinyint
            short                     smallint
            char                      char(1)
            float                     float(자리)
            double                    float(자리)
            long                      bigint
            String                    longtext









